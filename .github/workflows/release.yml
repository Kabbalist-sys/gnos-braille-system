name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Gnos Braille System ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸš€ Gnos Braille System ${{ steps.get_version.outputs.VERSION }}
          
          ### What's New
          - Automatic release from CI/CD pipeline
          - Production-ready builds for all platforms
          
          ### Download Options
          - **Android**: Download the APK or install from Google Play Store
          - **Web**: Access at [https://your-app-domain.com](https://your-app-domain.com)
          - **Source Code**: Available below
          
          ### Installation Instructions
          1. Download the appropriate build for your platform
          2. For Android: Enable "Install from Unknown Sources" if installing APK
          3. For Web: No installation required, access via browser
          
          ### Support
          - Report issues: [GitHub Issues](https://github.com/your-username/gnos-braille-system/issues)
          - Documentation: [README.md](https://github.com/your-username/gnos-braille-system/blob/main/README.md)
        draft: false
        prerelease: false

  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup Android signing
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=keystore.jks" >> android/key.properties
        
    - name: Build Android App Bundle (Production)
      run: |
        flutter build appbundle --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Build Android APK (Production)
      run: |
        flutter build apk --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Build Web App (Production)
      run: |
        flutter build web --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Create release archives
      run: |
        # Create archives for release assets
        cd build/app/outputs/bundle/release && zip -r ../../../../../gnos-braille-system-android-bundle.zip app-release.aab
        cd ../../../../../build/app/outputs/flutter-apk && zip -r ../../../../gnos-braille-system-android-apk.zip app-release.apk
        cd ../../../../build/web && zip -r ../gnos-braille-system-web.zip .
        
    - name: Upload Android App Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gnos-braille-system-android-bundle.zip
        asset_name: gnos-braille-system-android-bundle.zip
        asset_content_type: application/zip
        
    - name: Upload Android APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gnos-braille-system-android-apk.zip
        asset_name: gnos-braille-system-android-apk.zip
        asset_content_type: application/zip
        
    - name: Upload Web Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gnos-braille-system-web.zip
        asset_name: gnos-braille-system-web.zip
        asset_content_type: application/zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release-assets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Download web build
      run: |
        # This would download the web build from the previous job
        # For now, we'll rebuild it
        echo "Preparing for production deployment..."
        
    - name: Deploy to Firebase Hosting (Production)
      run: |
        firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }} --token ${{ secrets.FIREBASE_TOKEN }}
        
    - name: Deploy Firebase Rules (Production)
      run: |
        firebase deploy --only firestore:rules,storage --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }} --token ${{ secrets.FIREBASE_TOKEN }}
        
    - name: Notify deployment success
      run: |
        echo "ðŸŽ‰ Production deployment successful!"
        echo "Release: ${{ github.ref }}"
        echo "Web App: https://your-production-domain.com"
