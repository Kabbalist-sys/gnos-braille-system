name: Automated Publishing

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  FLUTTER_VERSION: '3.32.4'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Determine version and environment
  setup:
    name: Setup Publishing
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          ENV="${{ github.event.inputs.environment }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          ENV="production"
        fi
        
        # Check if it's a prerelease (contains alpha, beta, rc)
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          IS_PRERELEASE="true"
        else
          IS_PRERELEASE="false"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
    - name: Determine environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
        else
          ENV="production"
        fi
        echo "environment=$ENV" >> $GITHUB_OUTPUT

  # Build all release assets
  build-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup Android signing
      run: |
        mkdir -p android/app
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        cat > android/key.properties << EOF
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=keystore.jks
        EOF
        
    - name: Build Android App Bundle (Production)
      run: |
        flutter build appbundle --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Build Android APK (Production)
      run: |
        flutter build apk --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Build Web App (Production)
      run: |
        flutter build web --release \
          --dart-define=PRODUCTION=true \
          --dart-define=FIREBASE_API_KEY_PROD=${{ secrets.FIREBASE_API_KEY_PROD }} \
          --dart-define=FIREBASE_AUTH_DOMAIN_PROD=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }} \
          --dart-define=FIREBASE_PROJECT_ID_PROD=${{ secrets.FIREBASE_PROJECT_ID_PROD }} \
          --dart-define=FIREBASE_STORAGE_BUCKET_PROD=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }} \
          --dart-define=FIREBASE_MESSAGING_SENDER_ID_PROD=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }} \
          --dart-define=FIREBASE_APP_ID_PROD=${{ secrets.FIREBASE_APP_ID_PROD }} \
          --dart-define=FIREBASE_MEASUREMENT_ID_PROD=${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }} \
          --dart-define=BRAILLE_API_URL_PROD=${{ secrets.BRAILLE_API_URL_PROD }}
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-builds
        path: |
          build/app/outputs/bundle/release/app-release.aab
          build/app/outputs/flutter-apk/app-release.apk
          build/web/
        retention-days: 30

  # Publish to Google Play Store
  publish-android:
    name: Publish to Google Play Store
    runs-on: ubuntu-latest
    needs: [setup, build-assets]
    if: needs.setup.outputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-builds
        path: ./builds/
        
    - name: Setup Google Play authentication
      run: |
        echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" > google-play-service-account.json
        
    - name: Publish to Google Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: google-play-service-account.json
        packageName: com.example.gnos_braille_system
        releaseFiles: builds/build/app/outputs/bundle/release/app-release.aab
        track: ${{ needs.setup.outputs.is_prerelease == 'true' && 'internal' || 'production' }}
        status: completed
        inAppUpdatePriority: 2
        userFraction: 0.1  # Gradual rollout
        whatsNewDirectory: fastlane/metadata/android/en-US/changelogs/
        mappingFile: builds/build/app/outputs/mapping/release/mapping.txt

  # Deploy web app
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: [setup, build-assets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-builds
        path: ./builds/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase Hosting
      run: |
        # Copy web build to correct location
        cp -r builds/build/web/* build/web/ || mkdir -p build/web && cp -r builds/build/web/* build/web/
        
        # Deploy to appropriate environment
        if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
          PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID_PROD }}"
        else
          PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID_DEV }}"
        fi
        
        firebase deploy --only hosting --project $PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}
        
    - name: Deploy Firebase Rules
      run: |
        if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
          PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID_PROD }}"
        else
          PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID_DEV }}"
        fi
        
        firebase deploy --only firestore:rules,storage --project $PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [setup, build-assets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-builds
        path: ./builds/
        
    - name: Create release archives
      run: |
        # Create organized archives
        mkdir -p release-assets
        
        # Android App Bundle
        if [ -f "builds/build/app/outputs/bundle/release/app-release.aab" ]; then
          cp builds/build/app/outputs/bundle/release/app-release.aab release-assets/gnos-braille-system-${{ needs.setup.outputs.version }}-android.aab
        fi
        
        # Android APK
        if [ -f "builds/build/app/outputs/flutter-apk/app-release.apk" ]; then
          cp builds/build/app/outputs/flutter-apk/app-release.apk release-assets/gnos-braille-system-${{ needs.setup.outputs.version }}-android.apk
        fi
        
        # Web build
        if [ -d "builds/build/web" ]; then
          cd builds/build/web && zip -r ../../../release-assets/gnos-braille-system-${{ needs.setup.outputs.version }}-web.zip .
          cd ../../../
        fi
        
        # Source code
        git archive --format=zip --output=release-assets/gnos-braille-system-${{ needs.setup.outputs.version }}-source.zip HEAD
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        
        cat > release_notes.md << EOF
        ## 🚀 Gnos Braille System ${{ needs.setup.outputs.version }}
        
        ### What's New
        $CHANGELOG
        
        ### Download Options
        - **Android App Bundle (.aab)**: For Google Play Store submission
        - **Android APK (.apk)**: For direct installation on Android devices
        - **Web Application (.zip)**: For self-hosting or deployment
        - **Source Code (.zip)**: Complete source code for this release
        
        ### Installation Instructions
        
        #### Android APK
        1. Download the APK file
        2. Enable "Install from Unknown Sources" in Android settings
        3. Install the APK file
        
        #### Web Application
        1. Download and extract the web.zip file
        2. Host the contents on any web server
        3. Access via browser
        
        ### Platform Support
        - ✅ Android 7.0+ (API level 23+)
        - ✅ Web browsers (Chrome, Firefox, Safari, Edge)
        - ✅ Progressive Web App (PWA) support
        
        ### Environment
        - **Environment**: ${{ needs.setup.outputs.environment }}
        - **Flutter Version**: ${{ env.FLUTTER_VERSION }}
        - **Build Date**: $(date -u)
        
        ### Support & Documentation
        - 🐛 [Report Issues](https://github.com/Kabbalist-sys/gnos-braille-system/issues)
        - 📖 [Documentation](https://github.com/Kabbalist-sys/gnos-braille-system/blob/main/README.md)
        - 💬 [Discussions](https://github.com/Kabbalist-sys/gnos-braille-system/discussions)
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.setup.outputs.version }}
        name: Gnos Braille System ${{ needs.setup.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.setup.outputs.is_prerelease }}
        files: |
          release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify success
  notify-success:
    name: Notify Publishing Success
    runs-on: ubuntu-latest
    needs: [setup, publish-android, deploy-web, create-github-release]
    if: always()
    
    steps:
    - name: Generate notification
      run: |
        echo "## 🎉 Publishing Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Prerelease**: ${{ needs.setup.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.publish-android.result }}" = "success" ]; then
          echo "✅ **Google Play Store**: Published successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.publish-android.result }}" = "skipped" ]; then
          echo "⏭️ **Google Play Store**: Skipped (not production)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Google Play Store**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-web.result }}" = "success" ]; then
          echo "✅ **Web Deployment**: Published successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Web Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.create-github-release.result }}" = "success" ]; then
          echo "✅ **GitHub Release**: Created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Page](https://github.com/Kabbalist-sys/gnos-braille-system/releases/tag/${{ needs.setup.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Web App](https://your-app-domain.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [Google Play Store](https://play.google.com/store/apps/details?id=com.example.gnos_braille_system)" >> $GITHUB_STEP_SUMMARY
